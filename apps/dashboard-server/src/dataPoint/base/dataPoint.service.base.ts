/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, DataPoint as PrismaDataPoint } from "@prisma/client";

export class DataPointServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DataPointCountArgs, "select">
  ): Promise<number> {
    return this.prisma.dataPoint.count(args);
  }

  async dataPoints(
    args: Prisma.DataPointFindManyArgs
  ): Promise<PrismaDataPoint[]> {
    return this.prisma.dataPoint.findMany(args);
  }
  async dataPoint(
    args: Prisma.DataPointFindUniqueArgs
  ): Promise<PrismaDataPoint | null> {
    return this.prisma.dataPoint.findUnique(args);
  }
  async createDataPoint(
    args: Prisma.DataPointCreateArgs
  ): Promise<PrismaDataPoint> {
    return this.prisma.dataPoint.create(args);
  }
  async updateDataPoint(
    args: Prisma.DataPointUpdateArgs
  ): Promise<PrismaDataPoint> {
    return this.prisma.dataPoint.update(args);
  }
  async deleteDataPoint(
    args: Prisma.DataPointDeleteArgs
  ): Promise<PrismaDataPoint> {
    return this.prisma.dataPoint.delete(args);
  }
}
